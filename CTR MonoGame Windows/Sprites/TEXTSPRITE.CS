using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace CTR_MonoGame
{
    class TextSprite : AnimatedSprite
    {
        public enum Alignment { Left, Center, Right }

        const string chars = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~©ÀàÂâÆæÇçÈèÉéÊêËëÎîÏïÔôŒœÙùÛûÜü«»€ÄäÉéÖöß„“”°ÅÑáãåíìñóòõúÃÕÿŸﬁﬂÁÍÌÓÒÚ¿¡™АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";

        protected int spaceWidth, charOffset, lineOffset;
        protected float scale;

        Texture2D doubleSize;

        public TextSprite(ContentManager content, bool big)
            : this(content, big, 1)
        { }

        public TextSprite(ContentManager content, bool big, float scale)
            : this(content, big ? "big_font_hd" : "small_font_hd", big ? "2,2,26,125,30,2,30,125,62,2,49,125,113,2,32,125,147,2,59,125,208,2,30,125,240,2,15,125,257,2,35,125,294,2,34,125,330,2,43,125,375,2,34,125,411,2,17,125,430,2,37,125,469,2,18,125,489,2,41,125,532,2,44,125,578,2,19,125,599,2,42,125,643,2,35,125,680,2,38,125,720,2,41,125,763,2,39,125,804,2,42,125,848,2,44,125,894,2,32,125,928,2,18,125,948,2,18,125,968,2,48,125,2,129,29,125,33,129,40,125,75,129,35,125,112,129,51,125,165,129,41,125,208,129,40,125,250,129,46,125,298,129,39,125,339,129,37,125,378,129,36,125,416,129,40,125,458,129,40,125,500,129,19,125,521,129,36,125,559,129,36,125,597,129,44,125,643,129,59,125,704,129,35,125,741,129,50,125,793,129,48,125,843,129,43,125,888,129,41,125,931,129,45,125,978,129,44,125,2,256,48,125,52,256,42,125,96,256,59,125,157,256,50,125,209,256,38,125,249,256,55,125,306,256,52,125,360,256,44,125,406,256,45,125,453,256,32,125,487,256,60,125,549,256,19,125,570,256,36,125,608,256,42,125,652,256,40,125,694,256,38,125,734,256,35,125,771,256,38,125,811,256,34,125,847,256,35,125,884,256,19,125,905,256,31,125,938,256,39,125,979,256,18,125,2,383,56,125,60,383,32,125,94,383,30,125,126,383,37,125,165,383,50,125,217,383,34,125,253,383,36,125,291,383,41,125,334,383,38,125,374,383,44,125,420,383,59,125,481,383,48,125,531,383,43,125,576,383,47,125,625,383,46,125,673,383,20,125,695,383,33,125,730,383,39,125,771,383,61,125,834,383,42,125,878,383,36,125,916,383,42,125,960,383,38,125,2,510,67,125,71,510,50,125,123,510,43,125,168,510,35,125,205,510,36,125,243,510,36,125,281,510,36,125,319,510,36,125,357,510,36,125,395,510,36,125,433,510,36,125,471,510,36,125,509,510,32,125,543,510,32,125,577,510,27,125,606,510,27,125,635,510,50,125,687,510,39,125,728,510,66,125,796,510,49,125,847,510,42,125,891,510,35,125,928,510,42,125,972,510,35,125,2,637,42,125,46,637,35,125,83,637,42,125,127,637,47,125,176,637,52,125,230,637,42,125,274,637,36,125,312,637,36,125,350,637,36,125,388,637,50,125,440,637,39,125,481,637,44,125,527,637,35,125,564,637,35,125,601,637,35,125,638,637,32,125,672,637,42,125,716,637,45,125,763,637,37,125,802,637,36,125,840,637,37,125,879,637,30,125,911,637,30,125,943,637,38,125,983,637,39,125,2,764,39,125,43,764,39,125,84,764,35,125,121,764,42,125,165,764,50,125,217,764,38,125,257,764,48,125,307,764,37,125,346,764,39,125,387,764,42,125,431,764,30,125,463,764,30,125,495,764,50,125,547,764,50,125,599,764,43,125,644,764,40,125,686,764,24,125,712,764,65,125,779,764,51,125,832,764,36,125,870,764,39,125,911,764,38,125,951,764,50,125,2,891,36,125,40,891,36,125,78,891,58,125,138,891,36,125,176,891,42,125,220,891,42,125,264,891,49,125,315,891,49,125,366,891,49,125,417,891,40,125,459,891,47,125,508,891,42,125,552,891,38,125,592,891,38,125,632,891,45,125,679,891,44,125,725,891,47,125,774,891,42,125,818,891,45,125,865,891,38,125,905,891,57,125,2,1018,65,125,69,1018,48,125,119,1018,45,125,166,1018,39,125,207,1018,37,125,246,1018,53,125,301,1018,40,125,343,1018,34,125,379,1018,31,125,412,1018,30,125,444,1018,28,125,474,1018,31,125,507,1018,31,125,540,1018,30,125,572,1018,49,125,623,1018,30,125,655,1018,33,125,690,1018,33,125,725,1018,34,125,761,1018,35,125,798,1018,48,125,848,1018,33,125,883,1018,31,125,916,1018,39,125,957,1018,36,125,2,1145,29,125,33,1145,54,125,89,1145,33,125,124,1145,47,125,173,1145,33,125,208,1145,35,125,245,1145,31,125,278,1145,50,125,330,1145,51,125,383,1145,41,125,426,1145,40,125,468,1145,31,125,501,1145,30,125,533,1145,47,125,582,1145,31,125,615,1145,90,125,707,1145,90,125"
            : "2,2,13,125,17,2,16,125,35,2,29,125,66,2,18,125,86,2,35,125,123,2,16,125,141,2,6,125,149,2,19,125,170,2,18,125,190,2,24,125,216,2,19,125,237,2,8,125,247,2,20,125,269,2,9,125,280,2,22,125,304,2,24,125,330,2,9,125,341,2,23,125,366,2,19,125,387,2,21,125,410,2,23,125,435,2,22,125,459,2,23,125,484,2,25,125,511,2,18,125,531,2,8,125,541,2,8,125,551,2,27,125,580,2,15,125,597,2,22,125,621,2,19,125,642,2,29,125,673,2,23,125,698,2,23,125,723,2,26,125,751,2,21,125,774,2,21,125,797,2,20,125,819,2,22,125,843,2,22,125,867,2,9,125,878,2,20,125,900,2,20,125,922,2,25,125,949,2,35,125,986,2,19,125,2,129,30,125,34,129,28,125,64,129,25,125,91,129,23,125,116,129,26,125,144,129,25,125,171,129,27,125,200,129,24,125,226,129,34,125,262,129,29,125,293,129,21,125,316,129,31,125,349,129,30,125,381,129,24,125,407,129,26,125,435,129,17,125,454,129,35,125,491,129,9,125,502,129,20,125,524,129,23,125,549,129,22,125,573,129,22,125,597,129,19,125,618,129,21,125,641,129,18,125,661,129,19,125,682,129,8,125,692,129,16,125,710,129,22,125,734,129,8,125,744,129,33,125,779,129,17,125,798,129,15,125,815,129,20,125,837,129,29,125,868,129,19,125,889,129,19,125,910,129,23,125,935,129,20,125,957,129,25,125,984,129,34,125,2,256,27,125,31,256,25,125,58,256,27,125,87,256,26,125,115,256,10,125,127,256,18,125,147,256,21,125,170,256,36,125,208,256,24,125,234,256,19,125,255,256,24,125,281,256,21,125,304,256,40,125,346,256,28,125,376,256,24,125,402,256,19,125,423,256,20,125,445,256,20,125,467,256,20,125,489,256,20,125,511,256,20,125,533,256,20,125,555,256,20,125,577,256,20,125,599,256,18,125,619,256,17,125,638,256,14,125,654,256,14,125,670,256,30,125,702,256,21,125,725,256,40,125,767,256,28,125,797,256,24,125,823,256,19,125,844,256,24,125,870,256,19,125,891,256,24,125,917,256,19,125,938,256,23,125,963,256,27,125,2,383,31,125,35,383,24,125,61,383,19,125,82,383,20,125,104,383,20,125,126,383,30,125,158,383,21,125,181,383,25,125,208,383,19,125,229,383,19,125,250,383,19,125,271,383,17,125,290,383,28,125,320,383,31,125,353,383,24,125,379,383,23,125,404,383,24,125,430,383,18,125,450,383,18,125,470,383,24,125,496,383,25,125,523,383,25,125,550,383,25,125,577,383,22,125,601,383,27,125,630,383,34,125,666,383,24,125,692,383,32,125,726,383,22,125,750,383,23,125,775,383,27,125,804,383,18,125,824,383,18,125,844,383,34,125,880,383,34,125,916,383,29,125,947,383,26,125,975,383,13,125,2,510,39,125,43,510,29,125,74,510,20,125,96,510,22,125,120,510,22,125,144,510,29,125,175,510,20,125,197,510,19,125,218,510,34,125,254,510,20,125,276,510,24,125,302,510,24,125,328,510,28,125,358,510,29,125,389,510,29,125,420,510,22,125,444,510,27,125,473,510,24,125,499,510,21,125,522,510,21,125,545,510,26,125,573,510,25,125,600,510,27,125,629,510,24,125,655,510,27,125,684,510,22,125,708,510,34,125,744,510,39,125,785,510,29,125,816,510,26,125,844,510,21,125,867,510,21,125,890,510,31,125,923,510,22,125,947,510,18,125,967,510,17,125,986,510,16,125,1004,510,15,125,2,637,17,125,21,637,16,125,39,637,17,125,58,637,28,125,88,637,16,125,106,637,18,125,126,637,18,125,146,637,19,125,167,637,19,125,188,637,28,125,218,637,18,125,238,637,17,125,257,637,21,125,280,637,20,125,302,637,15,125,319,637,31,125,352,637,18,125,372,637,28,125,402,637,19,125,423,637,20,125,445,637,16,125,463,637,28,125,493,637,30,125,525,637,22,125,549,637,23,125,574,637,16,125,592,637,17,125,611,637,27,125,640,637,16,125,658,637,90,125,750,637,90,125",
            big ? 26 : 9, big ? -3 : 3, big ? -38 : -75, scale)
        {
            if (big)
            {
                doubleSize = content.Load<Texture2D>("big_font_hdx2");
            }
        }

        private TextSprite(ContentManager content, string imageFile, string magicFrameBoundsString, int spaceWidth, int charOffset, int lineOffset, float scale)
            : base(content.Load<Texture2D>(imageFile), magicFrameBoundsString, "", Point.Zero)
        {
            this.spaceWidth = spaceWidth;
            this.charOffset = charOffset;
            this.lineOffset = lineOffset;
            this.scale = scale;
        }

        private string[] GetLines(string s)
        {
            return s.Split('\n');
        }

        public string Wrap(string input, float width)
        {
            if (width < 0)
            {
                return input;
            }
            string[] words = input.Split(' ');
            string output = words[0];
            for (int i = 1; i < words.Length; i++)
            {
                if (GetMaxLength(output + " " + words[i]) > width)
                {
                    output += '\n' + words[i];
                }
                else
                {
                    output += ' ' + words[i];
                }
            }
            return output;
        }

        private float GetMaxLength(string s)
        {
            return (from line in GetLines(s) select GetLength(line)).Max();
        }

        private float GetLength(string s)
        {
            float rVal = 0;
            for (int i = 0; i < s.Length; i++)
            {
                rVal += GetWidth(s[i]) + charOffset * scale;
            }
            return rVal;
        }

        public float GetWidth(char c)
        {
            if (c == ' ')
            {
                return spaceWidth * scale;
            }
            else if (chars.IndexOf(c) < 0)
            {
                return spaceWidth * scale;
            }
            else
            {
                return frames[chars.IndexOf(c)].Width * scale;
            }
        }
		
		public void SetScale(float newScale)
		{
			scale = newScale;
		}

        public void Draw(SpriteBatch sb, string s, Vector2 pos)
        {
            Draw(sb, s, pos, Alignment.Left);
        }

        public void Draw(SpriteBatch sb, string s, Vector2 pos, Alignment a)
        {
            Draw(sb, s, pos, a, Color.White);
        }

        public void Draw(SpriteBatch sb, string s, Vector2 pos, Alignment a, Color color)
        {
            Draw(sb, s, pos, a, color, 0);
        }

        public void Draw(SpriteBatch sb, string s, Vector2 pos, Alignment a, Color color, float rotation)
        {
            Vector2 position = pos;
            foreach (string line in GetLines(s))
            {
                position.X = pos.X;
                float length = GetLength(line);
                switch (a)
                {
                    default:
                    case Alignment.Left:
                        break;
                    case Alignment.Center:
                        position.X -= length / 2;
                        break;
                    case Alignment.Right:
                        position.X -= length;
                        break;
                }
                for (int i = 0; i < line.Length; i++)
                {
                    if (line[i] != ' ' && chars.IndexOf(line[i]) >= 0)
                    {
                        if (doubleSize != null && scale > 2)
                        {
                            Rectangle small = frames[chars.IndexOf(line[i])];
                            Rectangle frame = new Rectangle(small.X * 2, small.Y * 2, small.Width * 2, small.Height * 2);
                            sb.Draw(doubleSize, Util.RotateVector(position, rotation, pos), frame, color, rotation, Vector2.Zero, scale / 2, SpriteEffects.None, 1);
                        }
                        else
                        {
                            sb.Draw(image, Util.RotateVector(position, rotation, pos), frames[chars.IndexOf(line[i])], color, rotation, Vector2.Zero, scale, SpriteEffects.None, 1);
                        }
                    }
                    position.X += GetWidth(line[i]) + charOffset * scale;
                }
                position.Y += frames[0].Height * scale + lineOffset * scale;
            }
        }
    }
}
