using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework;

namespace CTR_MonoGame
{
    class SpecialCharacterSprite : AnimatedSprite, ICharacterAnimation
    {
        #region Animation Frame Constants
        const int IMG_CHAR_ANIMATIONS_puzzled_start = 0;
        const int IMG_CHAR_ANIMATIONS_puzzled_end = 26;
        const int IMG_CHAR_ANIMATIONS_greeting_start = 27;
        const int IMG_CHAR_ANIMATIONS_greeting_end = 56;

        const int IMG_CHAR_ANIMATIONS_IDLE_idle_start = 0;
        int IMG_CHAR_ANIMATIONS_IDLE_idle_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 17 : 18; } }
        int IMG_CHAR_ANIMATIONS_IDLE_idle2_start { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 18 : 19; } }
        int IMG_CHAR_ANIMATIONS_IDLE_idle2_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 42 : 43; } }
        int IMG_CHAR_ANIMATIONS_IDLE_idle3_start { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 43 : 44; } }
        int IMG_CHAR_ANIMATIONS_IDLE_idle3_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 84 : 59; } }

        const int IMG_CHAR_ANIMATIONS_fail_start = 0;
        int IMG_CHAR_ANIMATIONS_fail_end { get { return type == OMNOM.SpecialCharacter.Prehistoric || type == OMNOM.SpecialCharacter.Painter ? 14 : 12; } }
        int IMG_CHAR_ANIMATIONS_chew_start { get { return type == OMNOM.SpecialCharacter.Prehistoric || type == OMNOM.SpecialCharacter.Painter ? 15 : 13; } }
        int IMG_CHAR_ANIMATIONS_chew_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 50 : type == OMNOM.SpecialCharacter.Painter ? 23 : 21; } }
        int IMG_CHAR_ANIMATIONS_excited_start { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 51 : type == OMNOM.SpecialCharacter.Painter ? 24 : 22; } }
        int IMG_CHAR_ANIMATIONS_excited_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 70 : type == OMNOM.SpecialCharacter.Painter ? 43 : 41; } }

        const int IMG_CHAR_ANIMATIONS_mouth_open_start = 0;
        int IMG_CHAR_ANIMATIONS_mouth_open_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 14 : type == OMNOM.SpecialCharacter.Pirate ? 11 : 8; } }
        int IMG_CHAR_ANIMATIONS_mouth_close_start { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 15 : type == OMNOM.SpecialCharacter.Pirate ? 12 : 9; } }
        int IMG_CHAR_ANIMATIONS_mouth_close_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 24 : type == OMNOM.SpecialCharacter.Pirate ? 15 : 12; } }
        int IMG_CHAR_ANIMATIONS_blink_start { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 25 : type == OMNOM.SpecialCharacter.Pirate ? 16 : 13; } }
        int IMG_CHAR_ANIMATIONS_blink_end { get { return type == OMNOM.SpecialCharacter.Prehistoric ? 34 : type == OMNOM.SpecialCharacter.Pirate ? 17 : 14; } }

        #endregion

        Texture2D[] extraTex;
        List<Rectangle>[] extraFrames;
        List<Point>[] extraOffsets;
        int idleCounter;

        OMNOM.SpecialCharacter type;

        public float Scale = 0.5f;

        public SpecialCharacterSprite(ContentManager content, OMNOM.SpecialCharacter type)
            : base(content.Load<Texture2D>(type.ToString() + "_animations_1_hd"), GetFrameString(type, 1),
            GetOffsetString(type, 1),
            type == OMNOM.SpecialCharacter.Prehistoric ? new Point(984, 984) : new Point(820, 820))
        {
            this.type = type;

            extraTex = new Texture2D[3];
            extraFrames = new List<Rectangle>[3];
            extraOffsets = new List<Point>[3];
            for (int n = 0; n < 3; n++)
            {
                extraTex[n] = content.Load<Texture2D>(type.ToString() + "_animations_" + (n + 2) + "_hd");
                LoadIdleFrames(n, GetFrameString(type, n + 2), GetOffsetString(type, n + 2));
            }

            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_GREETING, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_greeting_start, IMG_CHAR_ANIMATIONS_greeting_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_IDLE, 0.05, Animation.LoopType.Repeat, IMG_CHAR_ANIMATIONS_IDLE_idle_start, IMG_CHAR_ANIMATIONS_IDLE_idle_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_IDLE2, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_IDLE_idle2_start, IMG_CHAR_ANIMATIONS_IDLE_idle2_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_IDLE3, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_IDLE_idle3_start, IMG_CHAR_ANIMATIONS_IDLE_idle3_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_IDLE4, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_IDLE_idle3_start, IMG_CHAR_ANIMATIONS_IDLE_idle3_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_EXCITED, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_excited_start, IMG_CHAR_ANIMATIONS_excited_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_PUZZLED, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_puzzled_start, IMG_CHAR_ANIMATIONS_puzzled_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_FAIL, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_fail_start, IMG_CHAR_ANIMATIONS_fail_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_WIN, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_mouth_close_start, IMG_CHAR_ANIMATIONS_mouth_close_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_MOUTH_OPEN, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_mouth_open_start, IMG_CHAR_ANIMATIONS_mouth_open_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_MOUTH_CLOSE, 0.05, Animation.LoopType.Stop, IMG_CHAR_ANIMATIONS_mouth_close_start, IMG_CHAR_ANIMATIONS_mouth_close_end);
            AddAnimation(CharacterSprite.Animations.CHAR_ANIMATION_CHEW, 0.05, Animation.LoopType.Repeat, IMG_CHAR_ANIMATIONS_chew_start, IMG_CHAR_ANIMATIONS_chew_end);

            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_CHEW, (int)CharacterSprite.Animations.CHAR_ANIMATION_WIN, 0.05);
            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_PUZZLED, (int)CharacterSprite.Animations.CHAR_ANIMATION_MOUTH_CLOSE, 0.05);
            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE, (int)CharacterSprite.Animations.CHAR_ANIMATION_GREETING, 0.05);
            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE, (int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE2, 0.05);
            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE4, (int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE3, 0.05);
            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE, (int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE4, 0.05);
            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE, (int)CharacterSprite.Animations.CHAR_ANIMATION_EXCITED, 0.05);
            SetNextAnimation((int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE, (int)CharacterSprite.Animations.CHAR_ANIMATION_PUZZLED, 0.05);

            idleCounter = Util.R.Next(5, 20);
        }

        private static string GetFrameString(OMNOM.SpecialCharacter type, int p)
        {
            switch (type)
            {
                case OMNOM.SpecialCharacter.Caesar:
                    switch (p)
                    {
                        case 1:
                            return "1,1,372,324,1,327,357,328,1,657,323,354,1,1013,306,377,1,1392,316,375,1,1769,335,362,1,2133,355,348,360,327,367,342,729,327,365,341,1096,327,363,341,1461,327,362,342,1825,327,361,342,2188,327,361,342,2551,327,361,342,2914,327,361,342,3277,327,361,342,3640,327,361,342,360,671,361,342,360,1015,361,342,360,1359,361,342,360,1703,361,342,1,2483,341,351,1,2836,330,366,1,3204,325,376,1,3582,331,359,360,2047,359,339,723,671,371,334,1096,671,371,332,360,2388,318,359,360,2749,314,390,360,3141,314,403,360,3546,320,399,723,1007,332,388,1057,1007,360,372,1419,1007,376,371,1797,1007,379,367,2178,1007,383,360,2563,1007,393,355,2958,1007,389,357,3349,1007,384,364,1057,1381,381,362,1440,1381,394,354,1440,1737,390,356,1440,2095,384,364,1057,1745,381,362,1836,1381,394,354,1440,2461,390,356,1440,2819,383,364,1057,2109,381,362,2232,1381,399,348,2633,1381,390,353,1057,2473,343,379,1057,2854,337,382,723,1397,325,373,375,1,358,323,735,1,362,318,1469,671,366,327";
                        case 2:
                            return "1,1,370,332,1,335,370,335,1,672,367,339,1,1013,363,344,1,1359,359,349,1,1710,354,354,1,2066,349,358,1,2426,345,360,1,2788,343,361,1,3151,342,360,1,3513,343,361,373,335,346,362,721,335,349,362,1072,335,353,362,1427,335,356,355,1785,335,361,348,2148,335,364,342,2514,335,367,337,2883,335,369,333,373,1,399,323,774,1,373,322,373,699,361,367,736,699,381,408,736,1109,400,413,1119,699,410,406,1531,699,420,396,1953,699,409,389,2364,699,367,386,373,1068,355,384,2733,699,363,384,3098,699,402,385,3502,699,416,385,1138,1109,403,385,736,1524,369,385,736,1911,362,385,736,2298,368,385,1543,1109,403,385,1138,1496,417,386,1138,1884,417,391,1138,2277,414,394,736,2685,396,410,736,3097,384,388,1149,1,385,330,1536,1,401,323,1939,1,375,322,3254,335,370,334,3626,335,360,344,373,1454,360,353,736,3487,364,358,1948,1109,365,352,2315,1109,364,347,2316,1,365,332,2683,1,375,322,2681,1109,369,338,373,1809,359,349,3052,1109,364,359,3418,1109,367,364,1138,2673,367,356,1138,3031,363,346,1138,3379,365,334";
                        case 3:
                            return "1,1,372,315,1,318,344,322,1,642,326,336,1,980,316,359,319,980,311,352,632,980,317,352,951,980,330,337,329,642,335,327,666,642,337,328,1005,642,342,329,1349,642,347,330,1283,980,351,332,1636,980,353,334,347,318,400,321,1,1341,366,328,1,1671,329,349,1,2022,323,370,1,2394,323,375,1,2771,323,371,326,2022,328,360,332,1671,358,341,369,1341,389,326,375,1,340,315,1698,642,333,336,1,3144,316,373,1,3519,299,415,326,2384,290,432,618,2384,298,414,918,2384,315,394,1235,2384,333,382,1570,2384,330,386,618,2800,327,389,618,3191,324,393,618,3586,324,393,947,2800,324,393,1273,2800,324,393,1599,2800,324,393,947,3195,325,389,947,3586,323,383,1274,3195,327,377,656,2022,344,351,692,1671,340,341";
                        case 4:
                            return "1,1,379,362,382,1,359,342,743,1,349,337,1094,1,359,333,1455,1,373,326,1,365,384,321,1,688,379,321,1,1011,375,321,1,1334,373,321,1,1657,367,334,387,365,359,347,748,365,386,311,1136,365,407,284,1545,365,244,138,1545,505,223,143";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Painter:
                    switch (p)
                    {
                        case 1:
                            return "1,1,455,384,1,387,449,408,1,797,418,457,1,1256,413,525,1,1783,398,534,1,2319,403,521,1,2842,404,507,1,3351,417,496,452,387,425,492,879,387,432,488,879,877,430,492,879,1371,428,495,452,881,425,499,452,1382,425,505,452,1889,425,512,452,2403,425,516,452,2921,425,508,452,3431,425,498,879,1868,425,494,879,2364,425,494,879,2860,425,494,1313,387,426,488,879,3356,415,490,1311,877,404,533,1717,877,408,505,1741,387,401,467,2144,387,440,431,2586,387,401,467,2127,877,377,516,1311,1412,362,546,1311,1960,345,556,1311,2518,344,546,2506,877,366,521,2874,877,388,517,3264,877,399,516,3665,877,403,500,2989,387,414,480,3405,387,429,472,1675,1412,429,479,1675,1893,426,485,1675,2380,426,489,2103,1893,435,486,2540,1893,429,481,1675,2871,426,482,1675,3355,426,486,2103,2381,435,487,2971,1893,429,486,3402,1893,425,484,2103,2870,426,485,2106,1412,433,446,2541,1412,427,431,1311,3066,358,512,2103,3357,346,550,2540,2381,364,536,2970,1412,433,447,3405,1412,420,460,2906,2381,409,463";
                        case 2:
                            return "1,1,401,466,404,1,403,466,404,469,405,467,404,938,405,470,404,1410,404,475,1,469,396,481,1,952,388,487,1,1441,381,492,1,1935,375,494,1,2431,371,495,1,2928,370,495,1,3425,370,496,404,1887,370,493,404,2382,372,489,404,2873,374,485,404,3360,381,479,811,469,387,473,1200,469,394,469,1596,469,398,467,809,1,436,398,1247,1,446,442,811,944,420,523,811,1469,413,548,1233,944,424,521,1659,944,440,506,2101,944,458,490,2561,944,459,480,811,2019,416,477,811,2498,412,481,811,2981,408,486,3022,944,444,491,3468,944,458,495,1233,1467,449,493,811,3469,410,492,1233,1962,410,490,1233,2454,410,489,1233,2945,445,489,1684,1467,461,484,1684,1953,456,490,1233,3436,449,495,1684,2445,439,500,1996,469,430,473,1695,1,413,408,2110,1,436,398,2428,469,418,470,2548,1,417,462,2967,1,415,456,3384,1,396,463,2147,1467,389,478,2538,1467,387,475,2848,469,387,472,3237,469,388,470,3627,469,418,470,2927,1467,420,466,3349,1467,420,462,1684,2947,411,475,1684,3424,408,487,2142,1953,399,486,2543,1953,395,483,2940,1953,397,476";
                        case 3:
                            return "1,1,425,352,1,355,410,396,1,753,365,455,1,1210,339,503,1,1715,354,492,1,2209,383,470,413,355,411,447,1,2681,395,434,1,3117,384,440,1,3559,385,445,413,804,387,448,826,355,388,447,1216,355,388,446,1606,355,388,444,1996,355,388,443,802,804,447,467,802,1273,426,461,802,1736,399,454,802,2192,396,448,802,2642,407,469,802,3113,396,475,802,3590,405,471,1251,804,429,475,1682,804,445,465,428,1,426,337,2386,355,420,397,413,1254,378,508,413,1764,336,578,413,2344,332,559,413,2905,356,528,1251,1281,392,499,413,3435,382,483,1251,1782,370,490,1251,2274,371,495,1251,2771,372,499,1251,3272,376,498,1645,1281,376,496,2023,1281,376,495,2401,1281,376,493,2779,1281,373,485,2129,804,375,471,2506,804,361,467,2808,355,372,431,3182,355,412,415";
                        case 4:
                            return "1,1,431,401,1,404,406,420,1,826,385,426,1,1254,400,427,409,404,421,422,832,404,437,419,1271,404,432,417,409,828,427,415,409,1245,421,413,838,828,406,429,838,1259,382,439,1246,828,445,428,434,1,472,374,908,1,244,138,908,141,223,143";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Pharaoh:
                    switch (p)
                    {
                        case 1:
                            return "1,1,434,356,1,359,418,377,1,738,382,422,1,1162,368,430,1,1594,375,432,1,2028,393,428,1,2458,411,422,421,359,420,423,1,2882,416,423,1,3307,410,423,843,359,406,423,1251,359,406,423,1659,359,406,423,2067,359,406,423,2475,359,406,423,2883,359,406,423,3291,359,406,423,421,784,406,423,421,1209,406,423,421,1634,406,423,421,2059,406,423,421,2484,399,427,421,2913,380,441,421,3356,371,445,829,784,387,436,1218,784,401,399,1621,784,417,385,2040,784,405,395,829,1222,374,432,829,1656,361,449,829,2107,364,449,829,2558,362,447,829,3007,373,432,3699,359,394,412,1218,1185,406,400,2447,784,393,396,2842,784,393,393,3237,784,396,389,3635,784,397,390,1626,1185,394,393,2022,1185,394,393,2418,1185,396,389,2816,1185,396,390,3214,1185,394,393,3610,1185,394,393,1218,1587,394,389,1614,1587,396,390,1218,1978,394,393,1218,2373,394,393,1218,2768,391,378,829,3441,384,374,1218,3148,379,421,1218,3571,360,438,1614,1979,379,431,2012,1587,439,377,2453,1587,425,387,2880,1587,415,390";
                        case 2:
                            return "1,1,404,395,407,1,405,395,1,398,405,397,1,797,404,401,1,1200,400,406,1,1608,396,411,1,2021,391,416,1,2439,388,420,1,2861,385,422,1,3285,385,422,408,398,384,422,794,398,385,421,1181,398,386,418,1569,398,388,414,1959,398,392,409,2353,398,396,404,2751,398,400,400,3153,398,403,397,3558,398,404,396,814,1,445,363,1261,1,429,383,794,821,390,433,794,1256,390,452,1186,821,396,449,1584,821,406,440,1992,821,415,430,2409,821,411,425,2822,821,407,424,3231,821,404,424,3637,821,400,424,1186,1272,407,424,1595,1272,418,424,1186,1698,407,424,1186,2124,394,424,1186,2550,394,424,1186,2976,394,424,1186,3402,403,424,1595,1698,416,425,1595,2125,412,435,1595,2562,405,443,1595,3007,396,452,1595,3461,396,437,1692,1,427,387,2121,1,445,363,2568,1,422,386,2015,1272,414,397,2431,1272,410,407,2843,1272,407,416,3252,1272,406,423,3660,1272,409,419,2013,1698,420,408,2435,1698,421,397,2992,1,422,386,3416,1,416,395,2858,1698,409,403,2013,2108,409,411,2013,2521,408,416,2424,2108,411,414,3269,1698,418,405,2837,2108,420,396";
                        case 3:
                            return "1,1,437,339,1,342,420,361,1,705,374,406,1,1113,352,415,1,1530,361,414,1,1946,381,412,1,2360,401,409,1,2771,412,408,1,3181,408,408,1,3591,405,408,423,342,401,408,826,342,401,408,1229,342,401,408,1632,342,408,394,2042,342,406,403,423,752,404,412,423,1166,389,422,423,1590,376,431,423,2023,377,424,423,2449,377,416,2450,342,387,408,2839,342,398,401,3239,342,426,348,3667,342,408,380,423,2867,372,441,423,3310,348,462,829,752,346,459,1177,752,359,445,1538,752,372,431,1912,752,377,426,2291,752,375,426,2668,752,373,426,3043,752,371,426,3416,752,371,426,1177,1199,371,426,1177,1627,371,426,1177,2055,371,426,1177,2483,365,435,1177,2920,358,444,1550,1199,372,432,1924,1199,404,393,2330,1199,416,376";
                        case 4:
                            return "1,1,427,388,430,1,426,373,858,1,413,384,1273,1,420,380,1,391,432,371,435,391,439,366,876,391,439,366,1317,391,439,366,435,759,439,366,1,764,417,381,1,1147,396,396,1,1545,403,384,435,1127,403,365,1695,1,244,138,1695,141,223,143";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Pirate:
                    switch (p)
                    {
                        case 1:
                            return "1,1,483,406,1,409,477,426,1,837,444,464,1,1303,429,482,1,1787,431,476,1,2265,444,460,1,2727,456,444,1,3173,458,437,1,3612,458,437,480,409,458,437,940,409,458,437,1400,409,458,437,1860,409,458,437,480,848,458,440,480,1290,458,445,480,1737,458,451,480,2190,458,455,480,2647,458,451,2320,409,458,437,2780,409,458,437,3240,409,458,437,480,3100,456,447,480,3549,444,468,940,848,442,477,1384,848,450,462,1836,848,480,423,486,1,483,406,2318,848,474,417,2794,848,454,454,3250,848,452,472,940,1327,453,474,940,1803,453,470,1395,1327,470,452,1867,1327,499,424,2368,1327,516,411,2886,1327,516,408,3404,1327,512,409,1395,1781,507,409,1395,2192,504,411,1904,1781,508,411,2414,1781,508,410,1395,2605,504,409,1395,3016,505,411,2924,1781,508,411,3434,1781,508,410,1395,3429,504,409,1904,2194,505,411,2411,2194,508,411,2921,2194,508,410,971,1,511,393,1484,1,505,389,1904,2607,468,443,940,2275,451,462,940,2739,444,451,1991,1,507,394,1904,3052,489,408,1904,3462,474,413";
                        case 2:
                            return "1,1,472,416,475,1,474,415,1,419,473,417,1,838,471,420,1,1260,467,424,1,1686,463,429,1,2117,459,433,1,2552,456,435,1,2989,456,436,1,3427,457,436,476,419,456,437,934,419,457,436,1393,419,458,434,1853,419,461,431,2316,419,465,427,2783,419,469,422,3254,419,473,419,476,858,474,417,951,1,474,416,1427,1,492,391,1921,1,484,410,952,858,477,458,952,1318,484,474,1438,1318,485,470,1925,1318,492,461,1431,858,499,452,1932,858,498,450,2432,858,498,448,2932,858,499,448,3433,858,499,448,2419,1318,499,448,2920,1318,499,448,3421,1318,499,448,1438,1790,499,448,1438,2240,499,448,1438,2690,499,448,1438,3140,499,448,1438,3590,499,449,1939,1790,488,458,952,1794,478,465,476,1277,469,474,476,1753,468,462,952,2261,482,417,2407,1,492,391,2901,1,477,409,476,2217,470,420,476,2639,462,430,476,3071,453,439,476,3512,447,446,952,2680,446,443,952,3125,456,432,952,3559,467,420,3380,1,477,409,2429,1790,467,419,2898,1790,457,427,3357,1790,447,436,1939,2250,439,442,1939,2694,433,440,2380,2250,449,429,2831,2250,464,420";
                        case 3:
                            return "1,1,474,386,1,389,483,408,1,799,453,462,1,1263,444,482,1,1747,442,490,1,2239,452,482,1,2723,461,472,1,3197,473,466,486,389,473,466,961,389,473,466,1436,389,473,466,1911,389,473,466,2386,389,473,466,1,3665,482,411,2861,389,481,421,3344,389,474,446,486,857,455,455,486,1314,448,459,943,857,456,452,1401,857,461,441,1864,857,470,428,2336,857,473,418,2811,857,485,388,3298,857,485,417,486,1775,448,471,486,2248,429,512,486,2762,432,504,486,3268,449,484,943,1311,463,463,1408,1311,467,454,1408,1767,467,459,1408,2228,467,463,1408,2693,467,465,1408,3160,467,465,1408,3627,467,465,1877,1767,467,465,1877,2234,467,466,943,1776,457,475,943,2253,446,485,943,2740,450,465,1877,1311,477,417,477,1,504,385";
                        case 4:
                            return "1,1,474,406,1,409,451,422,1,833,449,426,454,409,458,420,452,833,473,411,477,1,483,405,1,1261,481,405,484,1261,478,405,1,1668,477,405,480,1668,477,405,1,2075,477,405,480,2075,478,405,1,2482,473,419,1,2903,469,432,476,2482,487,411,472,2903,500,385,1,3337,244,138,1,3477,223,143";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Viking:
                    switch (p)
                    {
                        case 1:
                            return "1,1,422,354,1,357,398,369,1,728,354,402,1,1132,327,411,1,1545,335,408,1,1955,351,400,1,2357,368,391,1,2750,376,388,1,3140,376,388,1,3530,376,388,401,357,376,388,779,357,376,388,1157,357,376,388,1535,357,376,388,1913,357,376,388,2291,357,376,388,2669,357,376,388,3047,357,376,388,3425,357,376,388,401,747,376,388,401,1137,376,388,401,1527,367,390,401,1919,346,402,401,2323,337,405,401,2730,354,399,401,3131,374,383,779,747,398,373,401,3516,373,381,779,1122,336,407,779,1531,315,416,779,1949,313,430,779,2381,324,430,1117,1122,360,411,1117,1535,358,381,1479,1122,378,375,1859,1122,376,374,1179,747,372,373,1553,747,382,367,1937,747,379,367,2318,747,377,372,2697,747,373,373,3072,747,382,367,3456,747,379,367,2237,1122,377,372,2616,1122,373,373,2991,1122,382,367,3375,1122,379,367,1479,1499,376,372,1479,1873,372,373,1857,1499,392,363,2251,1499,395,362,1117,1918,345,396,1117,2316,341,411,779,2813,333,397,425,1,384,340,2648,1499,378,362,1479,2248,373,377";
                        case 2:
                            return "1,1,373,381,1,384,372,382,1,768,371,385,1,1155,368,388,1,1545,365,393,1,1940,361,398,1,2340,358,403,1,2745,356,406,1,3153,354,409,1,3564,354,409,376,1,355,408,733,1,357,406,1092,1,359,403,1453,1,362,399,1817,1,364,395,2183,1,368,390,2553,1,370,387,2925,1,371,384,3298,1,373,382,3673,1,414,361,376,411,400,370,376,783,364,405,376,1190,368,437,376,1629,376,434,376,2065,387,430,376,2497,393,417,376,2916,386,414,376,3332,380,414,778,411,381,414,1161,411,382,414,1545,411,383,414,1930,411,393,414,2325,411,384,414,2711,411,383,414,3096,411,383,414,3481,411,383,414,778,827,383,414,1163,827,393,414,1163,1243,392,419,1163,1664,387,428,778,1243,378,437,778,1682,368,417,1558,827,397,378,1957,827,414,361,778,2101,383,368,778,2471,383,378,778,2851,382,387,778,3240,382,396,778,3638,381,402,2373,827,382,399,2757,827,382,389,3141,827,383,378,3526,827,383,368,1163,2094,385,376,1163,2472,386,383,1163,2857,387,391,1163,3250,387,395,1163,3647,387,392,1557,1243,386,384,1945,1243,385,376";
                        case 3:
                            return "1,1,417,346,1,349,397,360,1,711,349,390,1,1103,323,404,1,1509,337,400,420,1,362,390,784,1,376,380,1162,1,381,376,1162,379,377,378,784,383,373,378,784,763,373,378,784,1143,373,378,784,1523,373,378,1545,1,400,370,1162,759,379,382,1162,1143,369,394,420,393,360,406,420,801,351,418,420,1221,362,408,1162,1539,375,398,1545,373,379,389,1545,764,389,379,1947,1,413,347,1545,1145,396,365,420,1631,350,400,1545,1512,319,457,1947,350,329,458,1947,810,344,443,1947,1255,360,426,2362,1,366,420,2362,423,363,422,2362,847,361,423,2362,1272,360,424,2727,423,358,424,3087,423,356,424,3445,423,356,424,2727,849,356,424,2727,1275,342,430,3085,849,327,434,3414,849,341,421,2730,1,374,381,3106,1,384,371";
                        case 4:
                            return "1,1,389,367,392,1,390,352,784,1,379,362,1165,1,384,358,1551,1,395,350,1,370,402,345,1,717,402,345,1,1064,402,345,1,1411,402,345,405,370,388,359,405,731,374,373,795,370,398,353,1195,370,408,356,1,1758,244,138,1,1898,223,143";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Prehistoric:
                    switch (p)
                    {
                        case 1:
                            return "1,1,381,392,1,395,374,404,1,801,356,433,1,1236,348,466,1,1704,352,473,1,2179,355,447,1,2628,364,418,1,3048,372,410,384,1,382,407,384,410,391,411,777,410,394,410,777,822,395,417,777,1241,395,425,777,1668,395,430,777,2100,395,434,777,2536,395,439,777,2977,395,435,777,3414,395,430,1174,822,395,427,1571,822,395,418,1968,822,395,411,384,823,386,426,1,3460,359,434,384,1251,348,466,384,1719,356,451,384,2172,374,420,768,1,381,392,384,2594,379,419,384,3015,378,417,384,3434,374,430,1174,1251,370,460,1174,1713,369,477,1174,2192,369,477,1174,2671,370,470,1546,1251,374,454,1922,1251,394,430,2365,822,404,424,2771,822,407,422,2318,1251,410,433,2730,1251,408,433,3140,1251,406,429,3180,822,408,423,3590,822,408,419,3548,1251,409,419,1546,1707,408,422,1546,2131,406,424,1546,2557,404,423,1546,2982,405,421,1546,3405,406,421,1956,1707,410,422,1956,2131,408,423,1956,2556,406,439,1956,2997,396,441,1956,3440,372,430,2368,1707,376,419,2746,1707,379,418,2366,2131,379,430";
                        case 2:
                            return "1,1,379,446,1,449,379,437,382,1,380,430,764,1,381,424,1147,1,381,419,1530,1,380,421,1,888,379,425,1,1315,377,434,1,1751,377,441,1,2194,374,448,1,2644,372,453,1,3099,371,457,1,3558,371,466,382,433,371,471,755,433,372,472,1129,433,374,470,1505,433,374,464,1881,433,377,455,1912,1,379,419,2293,1,375,428,382,906,365,456,382,1364,354,461,382,1827,348,456,382,2285,356,449,2670,1,371,430,3043,1,365,422,3410,1,360,420,382,2736,360,419,382,3157,360,417,382,3576,366,414,2260,433,377,413,2639,433,365,414,3006,433,360,418,3368,433,360,419,3730,433,360,418,755,907,365,416,1122,907,377,412,755,1325,359,419,755,1746,352,433,755,2181,348,449,755,2632,354,452,1122,1321,366,436,1490,1321,379,419,1871,1321,381,419,2254,1321,383,417,1501,907,389,406,1892,907,399,398,2293,907,396,397,2691,907,390,404,755,3086,358,426,755,3514,334,444,1122,1759,310,453,1122,2214,312,458,1122,2674,319,453,1122,3129,329,442,1122,3573,335,431,1490,1742,337,425,1829,1742,338,420,2639,1321,337,416,3083,907,334,410,3419,907,331,410,3752,907,331,404,2978,1321,331,399,3311,1321,331,398,3644,1321,331,404,1490,2169,331,409,1490,2580,332,410,1490,2992,336,402,2169,1742,338,402,2509,1742,338,405,1490,3396,337,408,2849,1742,337,404,3188,1742,335,399,3525,1742,336,389,1829,2164,337,386,1829,2552,337,376,1829,2930,336,373,2168,2164,338,379,2508,2164,341,407,2508,2573,339,436,2849,2573,372,452,3223,2573,368,452,3593,2573,374,439,2849,3027,380,427,3231,3027,381,419";
                        case 3:
                            return "1,1,381,392,1,395,374,404,1,801,356,433,1,1236,348,466,1,1704,352,478,1,2184,355,464,1,2650,364,446,1,3098,372,437,384,1,382,434,384,437,391,435,777,437,394,439,777,878,395,440,777,1320,395,440,777,1762,395,440,777,2204,395,440,768,1,382,419,1,3537,380,423,1152,1,377,434,384,874,372,446,384,1322,371,457,384,1781,372,453,384,2236,374,442,1531,1,379,429,1912,1,380,422,2294,1,382,419,2678,1,380,427,384,2680,377,452,384,3134,372,481,777,2646,371,490,777,3138,372,482,384,3617,374,475,777,3622,379,461,3060,1,380,404,3442,1,415,389,1173,437,450,397,1625,437,377,418,1174,878,372,440,1174,1320,371,457,1547,1320,372,453,1921,1320,374,442,2004,437,379,429,2385,437,380,422,2767,437,382,419,3151,437,380,423,3533,437,377,434,2297,1320,372,446,1174,1779,371,457,2671,1320,372,453,3045,1320,374,442,1548,878,379,429,1929,878,380,422,2311,878,381,392,2694,878,374,405,3070,878,356,434,1174,2238,348,479,1174,2719,352,493,1174,3214,359,467,3428,878,370,428,3421,1320,380,415,1547,1775,382,418,1547,2195,382,429,1547,2626,382,439,1547,3067,382,442,1547,3511,382,441,1931,1775,382,436,2315,1775,382,434,1931,2213,366,444,1931,2659,348,454,1931,3115,356,446,2699,1775,374,423,3075,1775,381,411";
                        case 4:
                            return "1,1,381,419,1,422,377,423,1,847,371,430,380,422,374,421,384,1,379,393,765,1,381,380,1148,1,381,381,1531,1,381,386,756,422,381,388,1139,422,381,388,1522,422,381,388,374,847,381,388,757,847,381,388,1140,847,381,388,1523,847,381,388,1,1279,381,379,384,1279,381,369,1,1660,379,388,1,2050,374,424,1,2476,371,437,377,2050,377,441,756,2050,381,434,1139,2050,381,411,1522,2050,381,416,377,2493,381,419,767,1279,213,92,767,1373,205,98,767,1473,190,107,982,1279,177,109,982,1390,173,109,982,1501,168,116,1161,1279,168,117,1331,1279,169,109,1502,1279,171,101,1502,1382,170,100";
                        default:
                            return "";
                    }
                default:
                    return "";
            }
        }

        private static string GetOffsetString(OMNOM.SpecialCharacter type, int p)
        {
            switch (type)
            {
                case OMNOM.SpecialCharacter.Caesar:
                    switch (p)
                    {
                        case 1:
                            return "224,267,233,263,252,237,260,214,254,216,244,229,234,243,228,249,229,250,230,250,230,249,231,249,231,249,231,249,231,249,231,249,231,249,231,249,231,249,231,249,231,249,243,240,248,225,250,215,247,232,231,252,225,257,225,259,255,232,257,200,256,187,253,191,249,201,246,216,238,217,241,223,241,230,230,235,231,233,235,226,241,228,230,236,231,234,235,226,241,228,230,236,231,234,236,226,241,228,237,242,242,237,263,209,267,205,261,215,222,268,223,273,224,264";
                        case 2:
                            return "225,259,225,256,227,252,229,247,231,242,234,237,237,233,239,231,240,230,240,231,240,230,238,229,236,229,234,229,232,236,230,243,228,249,226,254,226,258,206,267,229,268,240,223,233,182,232,177,227,185,220,195,229,202,263,205,270,207,265,207,229,206,216,206,229,206,263,206,270,206,264,206,229,206,216,205,217,200,222,197,228,180,228,203,223,260,206,267,223,269,231,257,244,247,246,238,244,233,241,239,240,244,236,259,223,269,219,253,215,241,212,231,211,225,212,233,215,244,219,257";
                        case 3:
                            return "221,276,237,269,250,255,255,232,258,239,252,239,244,254,240,264,241,264,239,263,237,262,235,260,234,258,206,270,226,263,246,242,252,221,251,216,251,220,247,231,227,250,212,265,243,276,247,255,255,218,264,176,269,159,264,177,254,197,245,209,246,205,247,202,249,198,249,198,249,198,249,198,249,198,249,202,250,208,247,214,237,240,238,250";
                        case 4:
                            return "217,229,226,249,230,254,225,258,219,265,215,270,217,270,219,270,220,270,224,257,229,244,216,280,204,307,284,318,298,320";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Painter:
                    switch (p)
                    {
                        case 1:
                            return "213,207,204,183,208,134,210,66,217,57,222,70,230,84,221,95,217,99,213,103,213,99,213,96,213,92,213,94,213,96,213,97,213,97,213,97,213,97,213,97,213,97,213,103,219,101,218,58,219,86,236,124,211,161,234,124,233,74,233,44,245,34,253,43,249,68,245,71,237,71,240,89,240,110,229,118,230,125,234,117,240,110,229,119,230,126,234,120,240,114,229,118,230,121,235,118,240,115,236,147,242,164,262,76,251,37,243,52,207,146,217,131,226,128";
                        case 2:
                            return "235,125,235,124,235,123,236,120,237,115,241,109,245,103,248,98,251,96,252,95,252,94,252,94,252,97,251,101,250,105,246,111,243,117,239,121,236,123,216,192,208,148,231,67,237,42,232,69,227,85,222,101,231,111,270,114,270,110,270,105,235,100,222,96,231,98,270,99,270,101,270,102,235,102,222,107,222,101,226,96,231,90,232,117,246,182,216,192,220,130,223,135,226,137,241,128,243,113,241,116,239,119,244,124,220,130,213,130,207,130,206,115,198,102,201,103,211,107,225,117";
                        case 3:
                            return "227,254,228,214,244,140,255,98,247,109,236,131,227,154,237,167,237,161,237,156,237,153,237,154,237,155,237,157,237,158,186,124,206,130,236,137,244,145,239,129,244,124,230,120,203,116,189,126,226,254,218,194,231,83,258,21,269,34,262,63,245,92,249,108,251,101,251,96,251,92,249,93,249,95,249,96,249,98,254,106,252,120,257,124,249,160,239,176";
                        case 4:
                            return "205,190,217,171,231,166,223,165,213,170,206,173,208,175,209,177,211,179,218,162,236,153,196,164,190,217,284,318,298,320";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Pharaoh:
                    switch (p)
                    {
                        case 1:
                            return "188,235,196,214,214,169,221,161,218,159,210,163,201,169,197,168,199,168,202,168,204,168,204,168,204,168,204,168,204,168,204,168,204,168,204,168,204,168,204,168,204,168,207,164,216,150,221,146,215,155,207,192,199,206,204,196,219,159,225,141,223,141,222,143,220,157,216,176,222,188,225,194,227,197,228,201,227,200,230,197,230,197,228,201,228,200,230,197,230,197,230,201,228,200,230,197,230,197,237,212,242,216,245,167,242,149,230,157,190,214,196,204,200,201";
                        case 2:
                            return "205,196,204,196,204,194,205,190,207,185,209,180,212,175,214,171,216,169,216,169,216,169,215,170,214,173,213,177,211,182,209,187,207,191,205,194,204,195,190,227,205,207,239,157,237,138,232,141,227,151,222,161,229,166,234,167,239,167,244,167,235,167,222,167,231,167,244,167,244,167,244,167,235,167,222,166,222,156,226,148,231,138,232,153,205,203,190,227,196,205,206,194,213,184,218,175,220,168,214,172,202,183,199,194,196,205,193,196,191,187,188,179,187,173,190,175,192,185,194,195";
                        case 3:
                            return "193,252,201,230,224,185,236,176,231,177,220,179,209,183,202,184,204,184,205,184,207,184,207,184,207,184,205,197,206,188,208,179,215,169,221,160,221,167,221,175,216,183,210,190,191,243,203,211,219,150,234,129,236,132,229,146,222,160,219,165,220,165,221,165,222,165,222,165,222,165,222,165,222,165,225,156,229,147,222,159,206,198,200,215";
                        case 4:
                            return "191,203,197,218,202,207,199,211,193,220,191,225,191,225,191,225,191,225,201,210,211,195,209,207,208,226,284,318,298,320";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Pirate:
                    switch (p)
                    {
                        case 1:
                            return "169,186,172,166,189,127,197,109,196,115,189,131,182,147,181,154,181,154,181,154,181,154,181,154,181,154,181,154,181,154,181,154,181,154,181,154,181,154,181,154,181,154,183,144,190,123,191,114,186,129,170,168,169,186,173,174,183,137,184,118,183,116,183,120,176,137,193,164,183,177,177,182,174,181,182,181,186,179,180,179,180,180,186,181,185,179,180,179,180,180,186,181,185,179,180,179,180,180,189,197,193,201,200,145,212,125,214,137,156,197,165,183,173,178";
                        case 2:
                            return "175,175,174,176,175,174,177,171,179,167,182,162,184,158,186,156,186,155,186,155,186,154,185,155,184,157,182,160,180,164,177,169,175,172,174,174,174,175,159,200,176,181,195,133,201,117,204,121,202,130,201,139,205,143,205,144,204,144,204,144,204,144,204,144,204,144,204,144,204,144,204,144,204,144,204,143,209,134,213,126,216,117,209,129,181,175,159,200,171,183,184,172,197,162,210,153,219,146,215,149,201,160,186,172,171,183,166,173,162,164,158,155,156,148,159,151,162,162,166,172";
                        case 3:
                            return "176,205,171,183,186,136,191,118,192,121,186,134,181,147,174,156,174,156,174,156,174,156,174,156,174,156,172,180,173,170,177,145,187,136,190,132,186,139,183,150,179,163,177,173,171,203,170,174,188,120,197,79,196,87,187,107,180,128,178,137,178,132,178,128,178,126,178,126,178,126,178,126,178,125,183,116,189,106,187,126,173,174,159,206";
                        case 4:
                            return "174,185,184,169,180,165,175,171,168,180,165,186,167,186,170,186,171,186,171,186,171,186,170,186,174,172,177,159,165,180,152,206,284,318,298,320";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Viking:
                    switch (p)
                    {
                        case 1:
                            return "205,237,217,222,238,189,252,180,248,183,240,191,231,200,226,203,226,203,226,203,226,203,226,203,226,203,226,203,226,203,226,203,226,203,226,203,226,203,226,203,226,203,231,201,242,189,247,186,239,192,227,208,214,218,226,210,244,183,255,174,256,160,253,160,249,178,246,207,238,213,240,216,241,217,230,223,231,223,235,218,240,217,230,223,231,223,235,218,240,217,230,223,231,223,236,218,241,217,237,227,242,228,253,192,245,176,244,191,228,251,227,229,226,214";
                        case 2:
                            return "226,210,227,209,228,206,229,203,231,198,233,193,235,188,236,185,238,182,237,182,236,183,235,185,234,188,232,192,231,196,229,201,228,204,227,207,226,209,202,229,213,220,237,185,237,153,232,156,227,161,222,174,231,177,240,177,237,177,234,177,232,177,222,177,231,177,232,177,232,177,232,177,232,177,222,177,222,172,226,163,231,153,232,174,214,212,202,229,220,223,223,213,226,204,228,195,230,189,228,192,226,202,223,213,220,223,218,215,217,207,215,199,214,194,215,197,217,206,218,214";
                        case 3:
                            return "206,245,216,231,239,201,253,187,246,191,233,201,225,211,222,216,224,214,226,214,226,214,226,214,226,214,206,221,225,209,232,197,239,185,246,173,229,183,214,193,216,202,212,212,208,244,216,226,239,191,255,134,250,133,242,148,233,165,229,171,231,169,232,168,232,167,233,167,234,167,234,167,234,167,242,161,250,157,242,170,225,210,220,220";
                        case 4:
                            return "215,224,214,239,218,229,216,233,211,241,209,246,209,246,209,246,209,246,216,232,224,218,214,238,209,235,284,318,298,320";
                        default:
                            return "";
                    }
                case OMNOM.SpecialCharacter.Prehistoric:
                    switch (p)
                    {
                        case 1:
                            return "295,339,298,326,308,292,312,259,310,252,309,278,304,307,300,318,295,322,290,319,288,321,288,314,288,306,288,301,288,297,288,292,288,296,288,301,288,304,288,313,288,320,292,303,306,291,312,259,308,274,298,310,295,339,297,312,297,314,300,301,302,271,302,254,303,254,304,261,304,277,306,301,306,307,306,309,304,298,304,298,304,302,304,308,304,312,304,312,306,309,306,307,306,308,306,310,306,310,306,309,306,308,306,292,306,290,304,301,300,312,297,313,297,301";
                        case 2:
                            return "296,285,296,294,295,301,295,307,295,312,295,310,296,306,297,297,297,290,298,283,300,278,300,274,300,265,300,260,300,259,298,261,298,267,297,276,297,312,300,303,309,276,320,271,324,278,318,285,307,304,315,310,320,312,320,313,320,315,314,318,303,319,315,318,320,314,320,313,320,314,315,316,303,320,319,315,322,301,324,285,320,280,309,295,297,312,295,312,294,314,291,325,283,332,286,333,300,326,320,303,330,282,332,273,332,268,332,273,333,286,333,297,333,304,333,309,332,313,326,316,310,316,297,325,292,332,291,333,292,327,298,320,314,315,327,324,332,327,333,324,333,321,331,324,325,327,318,336,316,339,315,349,316,352,314,346,312,318,308,289,302,279,301,279,298,292,295,304,295,312";
                        case 3:
                            return "295,339,298,326,308,292,312,259,310,247,309,261,304,279,300,291,295,295,290,295,288,292,288,291,288,291,288,291,288,291,295,312,295,308,297,297,300,285,300,274,300,278,298,289,296,302,295,309,294,312,295,304,297,279,300,250,300,241,300,249,298,256,296,270,295,327,295,342,278,334,297,313,300,291,300,274,300,278,298,289,296,302,295,309,294,312,295,308,297,297,300,285,300,274,300,278,298,289,296,302,295,309,295,339,298,325,308,291,312,246,310,232,307,259,301,301,296,315,295,313,295,302,295,292,295,289,295,290,295,295,295,297,303,284,312,271,308,279,298,307,295,320";
                        case 4:
                            return "295,312,297,308,300,301,298,310,296,338,295,351,295,350,295,345,295,343,295,343,295,343,295,343,295,343,295,343,295,343,295,352,295,362,296,343,298,307,300,294,297,290,295,297,295,320,295,315,295,312,380,396,385,392,392,385,396,380,399,375,404,368,404,363,404,364,403,366,403,366";
                        default:
                            return "";
                    }
                default:
                    return "";
            }
        }
        
        private void LoadIdleFrames(int n, string magicFrameBoundsString, string magicOffsetsString)
        {
            extraFrames[n] = new List<Rectangle>();
            string[] frameBoundsList = magicFrameBoundsString.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < frameBoundsList.Length / 4; i++)
            {
                int frameStart = i * 4;
                extraFrames[n].Add(new Rectangle(int.Parse(frameBoundsList[frameStart]),
                    int.Parse(frameBoundsList[frameStart + 1]),
                    int.Parse(frameBoundsList[frameStart + 2]),
                    int.Parse(frameBoundsList[frameStart + 3])));
            }

            extraOffsets[n] = new List<Point>();
            string[] offsetList = magicOffsetsString.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < offsetList.Length / 2; i++)
            {
                int offsetStart = i * 2;
                extraOffsets[n].Add(new Point(int.Parse(offsetList[offsetStart]), int.Parse(offsetList[offsetStart + 1])));
            }
        }

        void AddAnimation(CharacterSprite.Animations animation, double delay, Animation.LoopType loopType, int start, int end)
        {
            base.AddAnimation((int)animation, new Animation(delay, start, end, loopType));
        }

        int GetTexID()
        {
            switch ((CharacterSprite.Animations)currentAnimation)
            {
                case CharacterSprite.Animations.CHAR_ANIMATION_PUZZLED:
                case CharacterSprite.Animations.CHAR_ANIMATION_GREETING:
                default:
                    return -1;
                case CharacterSprite.Animations.CHAR_ANIMATION_IDLE:
                case CharacterSprite.Animations.CHAR_ANIMATION_IDLE2:
                case CharacterSprite.Animations.CHAR_ANIMATION_IDLE3:
                case CharacterSprite.Animations.CHAR_ANIMATION_IDLE4:
                    return 0;
                case CharacterSprite.Animations.CHAR_ANIMATION_FAIL:
                case CharacterSprite.Animations.CHAR_ANIMATION_CHEW:
                case CharacterSprite.Animations.CHAR_ANIMATION_EXCITED:
                    return 1;
                case CharacterSprite.Animations.CHAR_ANIMATION_MOUTH_OPEN:
                case CharacterSprite.Animations.CHAR_ANIMATION_MOUTH_CLOSE:
                case CharacterSprite.Animations.CHAR_ANIMATION_WIN:
                    return 2;
            }
        }

        protected override void AnimationEnded(int animation)
        {
            if (animation == (int)CharacterSprite.Animations.CHAR_ANIMATION_IDLE)
            {
                idleCounter--;
                if (idleCounter == 0)
                {
                    idleCounter = Util.R.Next(2, 5);
                    SetAnimation(Util.R.Next(2) == 0 ? CharacterSprite.Animations.CHAR_ANIMATION_IDLE2 : CharacterSprite.Animations.CHAR_ANIMATION_IDLE3);
                }
            }
        }

        public override void Draw(SpriteBatch sb, Microsoft.Xna.Framework.Vector2 position, float rotation)
        {
            int tex = GetTexID();
            if (tex < 0)
            {
            if (currentFrame < 0 || currentFrame > frames.Count)
            {
                return;
            }
                sb.Draw(image, position, frames[currentFrame], Color.White, rotation, PtoV(fixedSize) / 2 - PtoV(offsets[currentFrame]), Scale, SpriteEffects.None, 1);
            }
            else
            {
                if (currentFrame < 0 || currentFrame > extraFrames[tex].Count)
                {
                    return;
                }
                sb.Draw(extraTex[tex], position, extraFrames[tex][currentFrame], Color.White, rotation, PtoV(fixedSize) / 2 - PtoV(extraOffsets[tex][currentFrame]), Scale, SpriteEffects.None, 1);
            }
        }

        public void SetAnimation(CharacterSprite.Animations animation)
        {
            base.SetAnimation((int)animation);
        }
    }
}
